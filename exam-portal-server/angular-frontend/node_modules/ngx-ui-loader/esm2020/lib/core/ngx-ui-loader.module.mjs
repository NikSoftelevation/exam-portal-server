import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxUiLoaderComponent } from './ngx-ui-loader.component';
import { NgxUiLoaderBlurredDirective } from './ngx-ui-loader-blurred.directive';
import { NGX_UI_LOADER_CONFIG_TOKEN } from './ngx-ui-loader-config.token';
import * as i0 from "@angular/core";
export class NgxUiLoaderModule {
    /**
     * forRoot
     *
     * @returns A module with its provider dependencies
     */
    static forRoot(ngxUiLoaderConfig) {
        return {
            ngModule: NgxUiLoaderModule,
            providers: [
                {
                    provide: NGX_UI_LOADER_CONFIG_TOKEN,
                    useValue: ngxUiLoaderConfig,
                },
            ],
        };
    }
}
NgxUiLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxUiLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxUiLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxUiLoaderModule, declarations: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective], imports: [CommonModule], exports: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective] });
NgxUiLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxUiLoaderModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxUiLoaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective],
                    exports: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdWktbG9hZGVyL3NyYy9saWIvY29yZS9uZ3gtdWktbG9hZGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBUTFFLE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQ1osaUJBQW9DO1FBRXBDLE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsMEJBQTBCO29CQUNuQyxRQUFRLEVBQUUsaUJBQWlCO2lCQUM1QjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OzhHQWxCVSxpQkFBaUI7K0dBQWpCLGlCQUFpQixpQkFIYixvQkFBb0IsRUFBRSwyQkFBMkIsYUFEdEQsWUFBWSxhQUVaLG9CQUFvQixFQUFFLDJCQUEyQjsrR0FFaEQsaUJBQWlCLFlBSm5CLENBQUMsWUFBWSxDQUFDOzJGQUlaLGlCQUFpQjtrQkFMN0IsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLDJCQUEyQixDQUFDO29CQUNqRSxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSwyQkFBMkIsQ0FBQztpQkFDN0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgTmd4VWlMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL25neC11aS1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5neFVpTG9hZGVyQmx1cnJlZERpcmVjdGl2ZSB9IGZyb20gJy4vbmd4LXVpLWxvYWRlci1ibHVycmVkLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOR1hfVUlfTE9BREVSX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbmd4LXVpLWxvYWRlci1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmd4VWlMb2FkZXJDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW05neFVpTG9hZGVyQ29tcG9uZW50LCBOZ3hVaUxvYWRlckJsdXJyZWREaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4VWlMb2FkZXJDb21wb25lbnQsIE5neFVpTG9hZGVyQmx1cnJlZERpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5neFVpTG9hZGVyTW9kdWxlIHtcbiAgLyoqXG4gICAqIGZvclJvb3RcbiAgICpcbiAgICogQHJldHVybnMgQSBtb2R1bGUgd2l0aCBpdHMgcHJvdmlkZXIgZGVwZW5kZW5jaWVzXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChcbiAgICBuZ3hVaUxvYWRlckNvbmZpZzogTmd4VWlMb2FkZXJDb25maWdcbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hVaUxvYWRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4VWlMb2FkZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HWF9VSV9MT0FERVJfQ09ORklHX1RPS0VOLFxuICAgICAgICAgIHVzZVZhbHVlOiBuZ3hVaUxvYWRlckNvbmZpZyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19